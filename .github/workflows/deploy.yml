name: Deploy Todo App

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Create S3 Bucket
      run: |
        if ! aws s3api head-bucket --bucket todo-app-tf-state-oktay 2>/dev/null; then
          aws s3api create-bucket \
            --bucket todo-app-tf-state-oktay \
            --region eu-central-1 \
            --create-bucket-configuration LocationConstraint=eu-central-1
        else
          echo "S3 bucket already exists, skipping creation..."
        fi

    - name: Create DynamoDB Table
      run: |
        # Tablo zaten varsa oluşturma
        if ! aws dynamodb describe-table --table-name terraform-lock --region eu-central-1 >/dev/null 2>&1; then
          aws dynamodb create-table \
            --table-name terraform-lock \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1 \
            --region eu-central-1
        else
          echo "DynamoDB table already exists, skipping creation..."
        fi

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform-workspace: main

    - name: Terraform Init & Apply
      id: terraform
      run: |
        cd infrastructure/terraform
        terraform init -reconfigure -input=false
        # GitHub Actions runner IP'sini al
        RUNNER_IP=$(curl -s ifconfig.me)
        echo "Using GitHub Actions runner IP: ${RUNNER_IP}"
        
        # Mevcut kaynakları kontrol et
        if ! terraform state list | grep -q "aws_instance.backend"; then
          terraform apply -auto-approve \
            -var="iam_user_name=${{ secrets.IAM_USER_NAME }}" \
            -var="my_public_ip=${RUNNER_IP}/32" \
            -var="aws_region=eu-central-1" \
            -var="app_name=todo-app" \
            -var="environment=production" \
            -lock=false
        else
          # Mevcut altyapıyı güncelle (sadece security group için)
          terraform apply -auto-approve \
            -var="iam_user_name=${{ secrets.IAM_USER_NAME }}" \
            -var="my_public_ip=${RUNNER_IP}/32" \
            -var="aws_region=eu-central-1" \
            -var="app_name=todo-app" \
            -var="environment=production" \
            -lock=false
        fi
        
        # Çıktıları dosyaya yaz
        terraform output -raw ec2_public_ip | tr -d '\r\n' > ec2_ip.txt
        terraform output -raw private_key | base64 -w0 > private_key.b64
        
        # Environment variables tanımla
        EC2_IP=$(cat ec2_ip.txt | tr -d '"')
        echo "EC2_IP=${EC2_IP}" >> $GITHUB_ENV
        echo "PRIVATE_KEY_B64=$(cat private_key.b64)" >> $GITHUB_ENV

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json

    - name: Configure Frontend
      if: ${{ !env.ACT }}
      run: |
        if [ ! -f frontend/.env ]; then
          # EC2 IP'yi terraform output'tan al
          EC2_IP=$(cd infrastructure/terraform && terraform output -raw ec2_public_ip)
          echo "REACT_APP_API_URL=http://${EC2_IP}:3001" > frontend/.env
        else
          echo "Frontend already configured, skipping..."
        fi

    - name: Build Frontend
      if: ${{ !env.ACT }}
      run: |
        if [ ! -d frontend/build ]; then
          cd frontend
          # Typescript versiyonunu güncelle ve bağımlılıkları yükle
          npm install typescript@4.9.5 --save-dev
          npm install
          npm run build
        else
          echo "Frontend already built, skipping..."
        fi

    - name: Deploy Frontend
      if: ${{ !env.ACT }}
      run: |
        if ! aws s3 ls s3://todo-app-frontend-bucket-oktay/index.html 2>/dev/null; then
          aws s3 sync frontend/build/ s3://todo-app-frontend-bucket-oktay --delete
        else
          echo "Frontend already deployed, skipping..."
        fi

    - name: Deploy Backend
      if: ${{ !env.ACT }}
      run: |
        # GitHub Secrets'tan değerleri al
        EC2_IP=${{ secrets.EC2_IP }}
        
        # Debug için security group'u kontrol et
        aws ec2 describe-security-groups --group-name todo-app-backend-sg-v3
        
        # Private key'i terraform'dan al ve geçici dosyaya yaz
        cd infrastructure/terraform
        terraform init -reconfigure -input=false
        terraform output -raw private_key > private_key.pem
        chmod 600 private_key.pem
        
        # Debug için IP'yi göster (private key'i gösterme)
        echo "Connecting to EC2 IP: $EC2_IP"
        
        # Doğru dizine geri dön
        cd ../..
        
        if ! ssh -i infrastructure/terraform/private_key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_IP "test -d /home/ec2-user/app/node_modules"; then
          scp -i infrastructure/terraform/private_key.pem -o StrictHostKeyChecking=no -r backend/* ec2-user@$EC2_IP:/home/ec2-user/app/
          ssh -i infrastructure/terraform/private_key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_IP "cd /home/ec2-user/app && npm ci && pm2 delete all || true && pm2 start src/server.js --name todo-backend"
        else
          echo "Backend already deployed, skipping..."
        fi
        # Temizlik
        rm -f infrastructure/terraform/private_key.pem 