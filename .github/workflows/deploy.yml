name: Deploy Todo App

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Create S3 Bucket
      run: |
        if ! aws s3api head-bucket --bucket todo-app-tf-state-oktay 2>/dev/null; then
          aws s3api create-bucket \
            --bucket todo-app-tf-state-oktay \
            --region eu-central-1 \
            --create-bucket-configuration LocationConstraint=eu-central-1
        else
          echo "S3 bucket already exists, skipping creation..."
        fi

    - name: Create DynamoDB Table
      run: |
        # Tablo zaten varsa oluşturma
        if ! aws dynamodb describe-table --table-name terraform-lock --region eu-central-1 >/dev/null 2>&1; then
          aws dynamodb create-table \
            --table-name terraform-lock \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1 \
            --region eu-central-1
        else
          echo "DynamoDB table already exists, skipping creation..."
        fi

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform-workspace: main

    - name: Terraform Init & Apply
      if: ${{ !env.ACT }}
      run: |
        cd infrastructure/terraform
        
        # Terraform başlat
        terraform init -reconfigure -input=false
        
        # Terraform state'i yenile
        terraform refresh
        
        # Terraform uygula
        terraform apply -auto-approve \
          -var="iam_user_name=${{ secrets.IAM_USER_NAME }}" \
          -var="my_public_ip=0.0.0.0/0" \
          -var="aws_region=eu-central-1" \
          -var="app_name=todo-app" \
          -var="environment=production"
        
        # Private key'i terraform'dan al ve kaydet
        terraform output -raw private_key > private_key.pem
        chmod 600 private_key.pem
        
        # EC2 IP'sini al
        EC2_IP=$(terraform output -raw ec2_public_ip)
        echo "EC2_IP=${EC2_IP}" >> $GITHUB_ENV

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json

    - name: Configure Frontend
      if: ${{ !env.ACT }}
      run: |
        if [ ! -f frontend/.env ]; then
          # EC2 IP'yi terraform output'tan al
          cd infrastructure/terraform
          # Terraform init
          terraform init -reconfigure -input=false
          # IP'yi al ve doğrula
          EC2_IP=$(terraform output ec2_public_ip | tr -d '"')
          if [ -z "$EC2_IP" ]; then
            echo "Error: Could not get EC2 IP"
            exit 1
          fi
          echo "REACT_APP_API_URL=http://${EC2_IP}:3001" > ../../frontend/.env
          cd ../..
        else
          echo "Frontend already configured, skipping..."
        fi

    - name: Build Frontend
      if: ${{ !env.ACT }}
      run: |
        if [ ! -d frontend/build ]; then
          cd frontend
          # Typescript versiyonunu güncelle ve bağımlılıkları yükle
          npm install typescript@4.9.5 --save-dev
          npm install
          npm run build
        else
          echo "Frontend already built, skipping..."
        fi

    - name: Deploy Frontend
      if: ${{ !env.ACT }}
      run: |
        if ! aws s3 ls s3://todo-app-frontend-bucket-oktay/index.html 2>/dev/null; then
          aws s3 sync frontend/build/ s3://todo-app-frontend-bucket-oktay --delete
        else
          echo "Frontend already deployed, skipping..."
        fi

    - name: Deploy Backend
      if: ${{ !env.ACT }}
      run: |
        cd infrastructure/terraform
        
        terraform init -reconfigure -input=false
        
        terraform apply -auto-approve \
          -var="iam_user_name=${{ secrets.IAM_USER_NAME }}" \
          -var="my_public_ip=0.0.0.0/0" \
          -var="aws_region=eu-central-1" \
          -var="app_name=todo-app" \
          -var="environment=production"
        
        # EC2 IP'sini terraform output'undan al
        EC2_IP=$(terraform output ec2_public_ip | tr -d '"')
        echo "Using EC2 IP: ${EC2_IP}"
        
        # Yeni EC2'nin başlamasını bekle
        echo "Waiting for EC2 to restart..."
        sleep 300  # 5 dakika bekle
        
        # Private key'i terraform'dan al
        terraform output -raw private_key > private_key.pem
        chmod 600 private_key.pem
        ls -la private_key.pem
        
        # SSH bağlantısını test et (daha uzun timeout ve retry)
        for i in {1..5}; do
          echo "Attempting SSH connection (attempt $i)..."
          echo "Connecting to EC2 IP: ${EC2_IP}"
          # SSH debug modunu aktifleştir
          if ssh -i private_key.pem -o StrictHostKeyChecking=no \
                                  -o ConnectTimeout=60 \
                                  -o ServerAliveInterval=60 \
                                  -o ServerAliveCountMax=3 \
                                  -v \
                                  -o BatchMode=yes \
                                  ec2-user@${EC2_IP} "echo 'SSH connection successful'"; then
            break
          fi
          if [ $i -eq 5 ]; then
            echo "Failed to establish SSH connection after 5 attempts"
            aws ec2 describe-instances --instance-ids $(terraform output instance_id | tr -d '"') \
                                     --query 'Reservations[].Instances[].State.Name' \
                                     --output text
            exit 1
          fi
          echo "Waiting before next attempt..."
          sleep 60
        done
        
        # Backend deployment
        echo "Deploying backend files..."
        if ! ssh -i private_key.pem -o StrictHostKeyChecking=no -o BatchMode=yes ec2-user@${EC2_IP} "test -d /home/ec2-user/app/node_modules"; then
          scp -i private_key.pem -o StrictHostKeyChecking=no -r backend/* ec2-user@${EC2_IP}:/home/ec2-user/app/
          echo "Installing dependencies..."
          ssh -i private_key.pem -o StrictHostKeyChecking=no -o BatchMode=yes ec2-user@${EC2_IP} "cd /home/ec2-user/app && npm ci && pm2 delete all || true && pm2 start src/server.js --name todo-backend"
        else
          echo "Backend already deployed, skipping..."
        fi
        
        # Temizlik
        rm -f private_key.pem
        cd ../.. 