name: Deploy Todo App

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Create S3 Bucket
      run: |
        aws s3api create-bucket \
          --bucket todo-app-tf-state-oktay \
          --region eu-central-1 \
          --create-bucket-configuration LocationConstraint=eu-central-1

    - name: Create DynamoDB Table
      run: |
        # Tablo zaten varsa oluşturma
        if ! aws dynamodb describe-table --table-name terraform-lock --region eu-central-1 >/dev/null 2>&1; then
          aws dynamodb create-table \
            --table-name terraform-lock \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1 \
            --region eu-central-1
        fi

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform-workspace: main

    - name: Terraform Init & Apply
      id: terraform
      run: |
        cd infrastructure/terraform
        # Checksum temizleme
        aws dynamodb update-item \
          --table-name terraform-lock \
          --key '{"LockID":{"S":"todo-app-tf-state-oktay/terraform.tfstate"}}' \
          --update-expression "REMOVE Digest" \
          --region eu-central-1 || true
        # State'i yeniden oluştur
        terraform state pull > current.tfstate
        terraform state push current.tfstate
        terraform init -reconfigure -input=false
        terraform force-unlock -force $(terraform state list | head -n1)
        terraform apply -auto-approve -var="iam_user_name=${{ secrets.IAM_USER_NAME }}" -refresh=false
        
        # Çıktıları dosyaya yaz
        terraform output -raw ec2_public_ip | tr -d '\r\n' > ec2_ip.txt
        terraform output -raw private_key | base64 -w0 > private_key.b64
        
        # Environment variables tanımla
        EC2_IP=$(cat ec2_ip.txt | tr -d '"')
        echo "EC2_IP=${EC2_IP}" >> $GITHUB_ENV
        echo "PRIVATE_KEY_B64=$(cat private_key.b64)" >> $GITHUB_ENV

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Configure Frontend
      run: |
        echo "REACT_APP_API_URL=http://$(terraform -chdir=infrastructure/terraform output -raw ec2_public_ip):3001" > frontend/.env

    - name: Build Frontend
      run: |
        cd frontend
        npm ci
        npm run build

    - name: Deploy Frontend
      run: |
        aws s3 sync frontend/build/ s3://todo-app-frontend-bucket-oktay --delete

    - name: Deploy Backend
      run: |
        EC2_IP=${{ env.EC2_IP }}
        # Artifact'tan private key'i al
        chmod 600 ${{ env.PRIVATE_KEY_FILE }}
        
        scp -i ${{ env.PRIVATE_KEY_FILE }} -o StrictHostKeyChecking=no -r backend/* ec2-user@$EC2_IP:/home/ec2-user/app/
        ssh -i ${{ env.PRIVATE_KEY_FILE }} ec2-user@$EC2_IP "cd /home/ec2-user/app && npm ci && pm2 restart all" 