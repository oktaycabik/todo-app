name: Deploy Todo App

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform-workspace: main

    - name: Terraform Init & Apply
      id: terraform
      run: |
        cd infrastructure/terraform
        terraform init -input=false
        terraform apply -auto-approve -var="iam_user_name=${{ secrets.IAM_USER_NAME }}"
        
        # jq'nun doğru kurulumu
        sudo apt-get update && sudo apt-get install -y jq
        
        # Debug için JSON çıktı
        terraform output -json > outputs.json
        cat outputs.json
        
        # JSON çıktıları parse etme
        EC2_IP=$(terraform output -json | jq -r '.ec2_public_ip.value')
        PRIVATE_KEY=$(terraform output -json | jq -r '.private_key.value' | base64 -w0)
        
        echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
        echo "PRIVATE_KEY=$(echo $PRIVATE_KEY | base64 -w0)" >> $GITHUB_ENV

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Configure Frontend
      run: |
        echo "REACT_APP_API_URL=http://$(terraform -chdir=infrastructure/terraform output -raw ec2_public_ip):3001" > frontend/.env

    - name: Build Frontend
      run: |
        cd frontend
        npm ci
        npm run build

    - name: Deploy Frontend
      run: |
        aws s3 sync frontend/build/ s3://todo-app-frontend-bucket-oktay --delete

    - name: Deploy Backend
      run: |
        EC2_IP=${{ env.EC2_IP }}
        PRIVATE_KEY=$(echo "${{ env.PRIVATE_KEY }}" | base64 -d | sed 's/\\n/\n/g; s/"/\"/g')
        
        # Private key validation
        if ! ssh-keygen -l -f <(echo "$PRIVATE_KEY") >/dev/null 2>&1; then
          echo "Invalid private key format"
          exit 1
        fi
        
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        # Debug connection
        ssh-keyscan $EC2_IP >> ~/.ssh/known_hosts
        ssh -i private_key.pem ec2-user@$EC2_IP "echo 'Connection successful'"
        
        # Deployment
        scp -i private_key.pem -o StrictHostKeyChecking=no -r backend/* ec2-user@$EC2_IP:/home/ec2-user/app/
        ssh -i private_key.pem ec2-user@$EC2_IP "cd /home/ec2-user/app && npm ci && pm2 restart all" 